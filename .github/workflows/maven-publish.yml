name: Build and Deploy Spring Boot Microservices

on:
  pull_request:
    branches:
      - main

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  SSH_PORT: 22

# INTERNATIONAL INSTANCE
  SSH_PASS_INTERNATIONAL: ${{ secrets.SSH_PRIVATE_KEY }}
  SSH_HOST_INTERNATIONAL: ${{ secrets.SSH_HOST_INTERNATIONAL }}
  SSH_USER_INTERNATIONAL: ${{ secrets.SSH_USER_INTERNATIONAL }}

  CONTAINER_NAME_INTERNATIONAL: dhis_pss_international
  IMAGE_NAME_INTERNATIONAL: dnjau/dhis_pss_international:v3

# NATIONAL INSTANCE
  SSH_PASS_NATIONAL: ${{ secrets.SSH_PRIVATE_KEY }}
  SSH_HOST_NATIONAL: ${{ secrets.SSH_HOST_NATIONAL }}
  SSH_USER_NATIONAL: ${{ secrets.SSH_USER_NATIONAL }}

  CONTAINER_NAME_NATIONAL: dhis_pss_national
  IMAGE_NAME_NATIONAL: dnjau/dhis_pss_national:v1

# FILE STORAGE
  CONTAINER_NAME_FILE: dhis_pss_file
  IMAGE_NAME_FILE: dnjau/dhis_pss_file:v1

# EMAIL SERVICE
  CONTAINER_NAME_MAIL: dhis_pss_mail
  IMAGE_NAME_MAIL: dnjau/dhis_pss_mail:v1


jobs:
  build_microservice_international:
    runs-on: ubuntu-20.04

    steps:
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: temurin
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build International Instance
        run: |
          cd InternationalInstance
          mvn clean install

      - name: Build & push International Docker image
        run: |
          cd InternationalInstance
          docker build -t ${{ env.IMAGE_NAME_INTERNATIONAL }} .
          docker login -u ${{ env.DOCKER_USERNAME }} -p ${{ env.DOCKER_PASSWORD }}
          docker push ${{ env.IMAGE_NAME_INTERNATIONAL }}
          docker logout

      - name: Setup SSH keys
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ env.SSH_PASS_INTERNATIONAL }}


      - name: Remote ssh to server and update international instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SSH_HOST_INTERNATIONAL }}
          username: ${{ env.SSH_USER_INTERNATIONAL }}
          port: ${{ env.SSH_PORT }}
          key: ${{ env.SSH_PASS_INTERNATIONAL }}
          script_stop: true
          script: |
            if docker ps -a --format '{{.Names}}' | grep -q ${{ env.CONTAINER_NAME_INTERNATIONAL }}; then
              echo "Check 1"
              docker stop ${{ env.CONTAINER_NAME_INTERNATIONAL }}
              docker rm ${{ env.CONTAINER_NAME_INTERNATIONAL }}
            fi
            docker pull --quiet ${{ env.IMAGE_NAME_INTERNATIONAL }}
            if [ $? -eq 0 ]; then
              echo "Docker image ${{ env.IMAGE_NAME_INTERNATIONAL }} pulled successfully"
            else
              echo "Error: Failed to pull Docker image ${{ env.IMAGE_NAME_INTERNATIONAL }}"
              exit 1
            fi
            docker run -d --name ${{ env.CONTAINER_NAME_INTERNATIONAL }} -p 7009:7009 ${{ env.IMAGE_NAME_INTERNATIONAL }}
            docker logout
            sleep 10
  


  build_microservice_national:
    runs-on: ubuntu-20.04

    steps:
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: temurin
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build National Instance
        run: |
          cd NationalInstance
          mvn clean install

      - name: Build & push National Docker image
        run: |
          cd NationalInstance
          docker build -t ${{ env.IMAGE_NAME_NATIONAL }} .
          docker login -u ${{ env.DOCKER_USERNAME }} -p ${{ env.DOCKER_PASSWORD }}
          docker push ${{ env.IMAGE_NAME_NATIONAL }}
          docker logout

      - name: Setup SSH keys
        uses: webfactory/ssh-agent@v0.5.0
        with:
          ssh-private-key: ${{ env.SSH_PASS_NATIONAL }}

      - name: Remote ssh to server and update National instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SSH_HOST_NATIONAL }}
          username: ${{ env.SSH_USER_NATIONAL }}
          port: ${{ env.SSH_PORT }}
          key: ${{ env.SSH_PASS_NATIONAL }}
          script_stop: true
          script: |
            if docker ps -a --format '{{.Names}}' | grep -q ${{ env.CONTAINER_NAME_NATIONAL }}; then
              echo "Check 1"
              docker stop ${{ env.CONTAINER_NAME_NATIONAL }}
              docker rm ${{ env.CONTAINER_NAME_NATIONAL }}
            fi
            docker pull --quiet ${{ env.IMAGE_NAME_NATIONAL }}
            if [ $? -eq 0 ]; then
              echo "Docker image ${{ env.IMAGE_NAME_NATIONAL }} pulled successfully"
            else
              echo "Error: Failed to pull Docker image ${{ env.IMAGE_NAME_NATIONAL }}"
              exit 1
            fi
            docker run -d --name ${{ env.CONTAINER_NAME_NATIONAL }} -p 7001:7001 ${{ env.IMAGE_NAME_NATIONAL }}
            docker logout
            sleep 10

  build_microservice_file:
    runs-on: ubuntu-20.04

    steps:
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: temurin
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build File Service
        run: |
          cd FileService
          mvn clean install

      - name: Build & push File Service Docker image
        run: |
          cd FileService
          docker build -t ${{ env.IMAGE_NAME_FILE }} .
          docker login -u ${{ env.DOCKER_USERNAME }} -p ${{ env.DOCKER_PASSWORD }}
          docker push ${{ env.IMAGE_NAME_FILE }}
          docker logout

      - name: Setup SSH keys
        uses: webfactory/ssh-agent@v0.5.0
        with:
          ssh-private-key: ${{ env.SSH_PASS_NATIONAL }}

      - name: Remote ssh to server and update File Service
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SSH_HOST_NATIONAL }}
          username: ${{ env.SSH_USER_NATIONAL }}
          port: ${{ env.SSH_PORT }}
          key: ${{ env.SSH_PASS_NATIONAL }}
          script_stop: true
          script: |
            if docker ps -a --format '{{.Names}}' | grep -q ${{ env.CONTAINER_NAME_FILE }}; then
              echo "Check 1"
              docker stop ${{ env.CONTAINER_NAME_FILE }}
              docker rm ${{ env.CONTAINER_NAME_FILE }}
            fi
            docker pull --quiet ${{ env.IMAGE_NAME_FILE }}
            if [ $? -eq 0 ]; then
              echo "Docker image ${{ env.IMAGE_NAME_FILE }} pulled successfully"
            else
              echo "Error: Failed to pull Docker image ${{ env.IMAGE_NAME_FILE }}"
              exit 1
            fi
            docker run -d --name ${{ env.CONTAINER_NAME_FILE }} -p 7003:7003 ${{ env.IMAGE_NAME_FILE }}
            docker logout
            sleep 10
  build_microservice_email_service:
    runs-on: ubuntu-20.04

    steps:
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: temurin
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build Email Service
        run: |
          cd MailServer
          mvn clean install

      - name: Build & push Email Service Docker image
        run: |
          cd MailServer
          docker build -t ${{ env.IMAGE_NAME_MAIL }} .
          docker login -u ${{ env.DOCKER_USERNAME }} -p ${{ env.DOCKER_PASSWORD }}
          docker push ${{ env.IMAGE_NAME_MAIL }}
          docker logout

      - name: Setup SSH keys
        uses: webfactory/ssh-agent@v0.5.0
        with:
          ssh-private-key: ${{ env.SSH_PASS_NATIONAL }}

      - name: Remote ssh to server and update File Service
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SSH_HOST_NATIONAL }}
          username: ${{ env.SSH_USER_NATIONAL }}
          port: ${{ env.SSH_PORT }}
          key: ${{ env.SSH_PASS_NATIONAL }}
          script_stop: true
          script: |
            if docker ps -a --format '{{.Names}}' | grep -q ${{ env.CONTAINER_NAME_MAIL }}; then
              echo "Check 1"
              docker stop ${{ env.CONTAINER_NAME_MAIL }}
              docker rm ${{ env.CONTAINER_NAME_MAIL }}
            fi
            docker pull --quiet ${{ env.IMAGE_NAME_MAIL }}
            if [ $? -eq 0 ]; then
              echo "Docker image ${{ env.IMAGE_NAME_MAIL }} pulled successfully"
            else
              echo "Error: Failed to pull Docker image ${{ env.IMAGE_NAME_MAIL }}"
              exit 1
            fi
            docker run -d --name ${{ env.CONTAINER_NAME_MAIL }} -p 7007:7007 ${{ env.IMAGE_NAME_MAIL }}
            docker logout
            sleep 10